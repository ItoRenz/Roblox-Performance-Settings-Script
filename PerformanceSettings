-- ============================================
-- ROBLOX PERFORMANCE SETTINGS SCRIPT (FIXED)
-- ============================================
-- Location: StarterPlayer > StarterPlayerScripts
-- ============================================

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Wait for camera more efficiently
local camera = Workspace.CurrentCamera or Workspace:GetPropertyChangedSignal("CurrentCamera"):Wait()

-- ============================================
-- CONFIGURATION
-- ============================================

local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

local QUALITY_PRESETS = {
	Low = { 
		renderDistance = 250,
		shadowsEnabled = false,
		particlesEnabled = false,
		postProcessing = false,
		fogEnabled = true,
		fogStart = 0,
		fogEnd = 250,
		brightness = 1.5,
		technology = Enum.Technology.Legacy,
		castShadow = false,
		environmentSpecularScale = 0,
		environmentDiffuseScale = 0,
		ambientIntensity = 0.3,
		outdoorAmbient = Color3.fromRGB(100, 100, 100),
		reflectance = 0
	},
	Medium = { 
		renderDistance = 800,
		shadowsEnabled = true,
		particlesEnabled = true,
		postProcessing = false,
		fogEnabled = false,
		fogStart = 0,
		fogEnd = 100000,
		brightness = 2,
		technology = Enum.Technology.ShadowMap,
		castShadow = true,
		environmentSpecularScale = 0.3,
		environmentDiffuseScale = 0.3,
		ambientIntensity = 0.5,
		outdoorAmbient = Color3.fromRGB(127, 127, 127),
		reflectance = 0.3
	},
	High = { 
		renderDistance = 1500,
		shadowsEnabled = true,
		particlesEnabled = true,
		postProcessing = true,
		fogEnabled = false,
		fogStart = 0,
		fogEnd = 100000,
		brightness = 2.5,
		technology = Enum.Technology.Future,
		castShadow = true,
		environmentSpecularScale = 0.7,
		environmentDiffuseScale = 0.7,
		ambientIntensity = 0.7,
		outdoorAmbient = Color3.fromRGB(140, 140, 140),
		reflectance = 0.6
	},
	Cinematic = { 
		renderDistance = 2500,
		shadowsEnabled = true,
		particlesEnabled = true,
		postProcessing = true,
		fogEnabled = false,
		fogStart = 0,
		fogEnd = 100000,
		brightness = 3,
		technology = Enum.Technology.Future,
		castShadow = true,
		environmentSpecularScale = 1,
		environmentDiffuseScale = 1,
		ambientIntensity = 1,
		outdoorAmbient = Color3.fromRGB(160, 160, 160),
		reflectance = 1
	}
}

local COLORS = {
	Low = Color3.fromRGB(255, 100, 100),
	Medium = Color3.fromRGB(255, 180, 60),
	High = Color3.fromRGB(100, 200, 100),
	Cinematic = Color3.fromRGB(138, 43, 226)
}

local currentQuality = "Medium"

-- ============================================
-- UTILITY FUNCTIONS
-- ============================================

local function saveQuality(qualityName)
	currentQuality = qualityName
	pcall(function()
		player:SetAttribute("PreferredQuality", qualityName)
	end)
end

local function getLastQuality()
	local success, saved = pcall(function()
		return player:GetAttribute("PreferredQuality")
	end)
	return (success and saved and QUALITY_PRESETS[saved]) and saved or currentQuality
end

-- Debounce helper
local function debounce(func, wait)
	local lastCall = 0
	return function(...)
		local now = tick()
		if now - lastCall >= wait then
			lastCall = now
			return func(...)
		end
	end
end

-- ============================================
-- PERFORMANCE SETTINGS APPLICATION
-- ============================================

local isApplying = false
local applyQueue = nil

local function applyPerformanceSettings(qualityName)
	-- Queue system to prevent spam
	if isApplying then
		applyQueue = qualityName
		return
	end
	
	local preset = QUALITY_PRESETS[qualityName]
	if not preset then return end
	
	isApplying = true
	
	print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
	print("🎮 Applying " .. qualityName:upper() .. " Graphics Settings")
	print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
	
	-- Render Distance
	local distanceSuccess = pcall(function()
		if player.Character then
			player.CameraMaxZoomDistance = preset.renderDistance
			player.CameraMinZoomDistance = 0.5
		end
	end)
	if distanceSuccess then
		print("✓ Render Distance: " .. preset.renderDistance)
	end
	
	-- Lighting
	local lightingSuccess = pcall(function()
		Lighting.Technology = preset.technology
		Lighting.GlobalShadows = preset.shadowsEnabled
		Lighting.EnvironmentSpecularScale = preset.environmentSpecularScale
		Lighting.EnvironmentDiffuseScale = preset.environmentDiffuseScale
		Lighting.Brightness = preset.brightness
		Lighting.Ambient = Color3.new(preset.ambientIntensity, preset.ambientIntensity, preset.ambientIntensity)
		Lighting.OutdoorAmbient = preset.outdoorAmbient
	end)
	if lightingSuccess then
		print("✓ Lighting: " .. tostring(preset.technology))
		print("✓ Shadows: " .. (preset.shadowsEnabled and "ON" or "OFF"))
	end
	
	-- Part Shadows & Reflectance (Optimized with batch processing)
	task.spawn(function()
		local partsProcessed = 0
		local batchSize = 100
		local parts = {}
		
		-- Collect parts first
		local collectSuccess = pcall(function()
			for _, obj in ipairs(Workspace:GetDescendants()) do
				if obj:IsA("BasePart") then
					table.insert(parts, obj)
				end
			end
		end)
		
		if not collectSuccess then
			warn("⚠ Could not collect parts for processing")
			return
		end
		
		-- Process in batches
		for i = 1, #parts, batchSize do
			for j = i, math.min(i + batchSize - 1, #parts) do
				local part = parts[j]
				pcall(function()
					if part and part.Parent then
						part.CastShadow = preset.castShadow
						if part.Material ~= Enum.Material.Plastic and part.Material ~= Enum.Material.SmoothPlastic then
							part.Reflectance = preset.reflectance
						end
					end
				end)
				partsProcessed = partsProcessed + 1
			end
			if i % 500 == 0 then
				task.wait() -- Yield periodically to prevent lag
			end
		end
		
		print("✓ Parts Processed: " .. partsProcessed)
		print("✓ Shadows: " .. (preset.castShadow and "ON" or "OFF") .. " | Reflectance: " .. (preset.reflectance * 100) .. "%")
	end)
	
	-- Particles
	task.spawn(function()
		local particleCount = 0
		local particleSuccess = pcall(function()
			for _, obj in ipairs(Workspace:GetDescendants()) do
				if obj:IsA("ParticleEmitter") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
					pcall(function() 
						if obj and obj.Parent then
							obj.Enabled = preset.particlesEnabled 
						end
					end)
					particleCount = particleCount + 1
				end
			end
		end)
		if particleSuccess then
			print("✓ Particles: " .. (preset.particlesEnabled and "ON" or "OFF") .. " (" .. particleCount .. " emitters)")
		end
	end)
	
	-- Post Processing (Cleaned up with better error handling)
	local postProcessSuccess = pcall(function()
		-- Remove ALL existing post effects
		for _, effect in ipairs(Lighting:GetChildren()) do
			if effect:IsA("PostEffect") or effect:IsA("Atmosphere") then
				pcall(function() effect:Destroy() end)
			end
		end
		
		if preset.postProcessing then
			-- Bloom
			pcall(function()
				local bloom = Instance.new("BloomEffect")
				bloom.Intensity = qualityName == "Cinematic" and 1 or 0.5
				bloom.Size = qualityName == "Cinematic" and 56 or 32
				bloom.Threshold = qualityName == "Cinematic" and 1 or 1.8
				bloom.Parent = Lighting
			end)
			
			-- SunRays (High and Cinematic)
			if qualityName == "High" or qualityName == "Cinematic" then
				pcall(function()
					local sunrays = Instance.new("SunRaysEffect")
					sunrays.Intensity = qualityName == "Cinematic" and 0.08 or 0.04
					sunrays.Spread = qualityName == "Cinematic" and 1 or 0.7
					sunrays.Parent = Lighting
				end)
			end
			
			-- Color Correction
			pcall(function()
				local colorCorrection = Instance.new("ColorCorrectionEffect")
				colorCorrection.Brightness = qualityName == "Cinematic" and 0.05 or 0.02
				colorCorrection.Contrast = qualityName == "Cinematic" and 0.2 or 0.1
				colorCorrection.Saturation = qualityName == "Cinematic" and 0.2 or 0.1
				colorCorrection.TintColor = qualityName == "Cinematic" and Color3.fromRGB(255, 250, 240) or Color3.fromRGB(255, 255, 255)
				colorCorrection.Parent = Lighting
			end)
			
			-- Cinematic-exclusive effects
			if qualityName == "Cinematic" then
				pcall(function()
					local atmosphere = Instance.new("Atmosphere")
					atmosphere.Density = 0.395
					atmosphere.Offset = 0.5
					atmosphere.Color = Color3.fromRGB(199, 199, 199)
					atmosphere.Decay = Color3.fromRGB(106, 112, 125)
					atmosphere.Glare = 0.4
					atmosphere.Haze = 1.8
					atmosphere.Parent = Lighting
				end)
				
				pcall(function()
					local dof = Instance.new("DepthOfFieldEffect")
					dof.FarIntensity = 0.15
					dof.FocusDistance = 60
					dof.InFocusRadius = 40
					dof.NearIntensity = 0.3
					dof.Parent = Lighting
				end)
				
				pcall(function()
					local blur = Instance.new("BlurEffect")
					blur.Size = 2
					blur.Parent = Lighting
				end)
				
				print("✓ Cinematic Effects: Atmosphere, DoF, Blur")
			end
			
			print("✓ Post Processing: " .. qualityName)
		else
			print("✓ Post Processing: OFF")
		end
	end)
	
	if not postProcessSuccess then
		warn("⚠ Some post-processing effects could not be applied")
	end
	
	-- Fog
	local fogSuccess = pcall(function()
		Lighting.FogEnabled = preset.fogEnabled
		if preset.fogEnabled then
			Lighting.FogStart = preset.fogStart
			Lighting.FogEnd = preset.fogEnd
			Lighting.FogColor = Color3.fromRGB(192, 192, 192)
		end
	end)
	if fogSuccess then
		print("✓ Fog: " .. (preset.fogEnabled and "ON" or "OFF"))
	end
	
	print("✅ " .. qualityName:upper() .. " Applied!")
	print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
	
	saveQuality(qualityName)
	isApplying = false
	
	-- Process queued request
	if applyQueue then
		local queued = applyQueue
		applyQueue = nil
		applyPerformanceSettings(queued)
	end
end

-- ============================================
-- GUI CREATION
-- ============================================

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "PerformanceGui"
screenGui.Enabled = false
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = playerGui

local toggleScreenGui = Instance.new("ScreenGui")
toggleScreenGui.Name = "PerformanceToggle"
toggleScreenGui.ResetOnSpawn = false
toggleScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
toggleScreenGui.Parent = playerGui

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = isMobile and UDim2.new(0, 180, 0, 260) or UDim2.new(0, 260, 0, 320)
mainFrame.Position = isMobile and UDim2.new(1, -190, 0, 10) or UDim2.new(1, -270, 0, 15)
mainFrame.AnchorPoint = Vector2.new(1, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
mainFrame.BackgroundTransparency = 0.05
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local frameCorner = Instance.new("UICorner")
frameCorner.CornerRadius = UDim.new(0, 12)
frameCorner.Parent = mainFrame

-- Header
local header = Instance.new("Frame")
header.Size = UDim2.new(1, 0, 0, 38)
header.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
header.BackgroundTransparency = 0.3
header.BorderSizePixel = 0
header.Parent = mainFrame

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, 12)
headerCorner.Parent = header

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, -45, 1, 0)
titleLabel.Position = UDim2.new(0, 12, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "⚡ PERFORMANCE"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextSize = isMobile and 10 or 12
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Parent = header

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 28, 0, 28)
closeBtn.Position = UDim2.new(1, -34, 0, 5)
closeBtn.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
closeBtn.BackgroundTransparency = 0.15
closeBtn.BorderSizePixel = 0
closeBtn.Text = "✕"
closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
closeBtn.TextSize = 16
closeBtn.Font = Enum.Font.GothamBold
closeBtn.AutoButtonColor = false
closeBtn.Parent = header

local closeBtnCorner = Instance.new("UICorner")
closeBtnCorner.CornerRadius = UDim.new(0, 7)
closeBtnCorner.Parent = closeBtn

closeBtn.MouseButton1Click:Connect(function()
	screenGui.Enabled = false
end)

-- Buttons Container
local container = Instance.new("Frame")
container.Size = UDim2.new(1, -12, 1, -48)
container.Position = UDim2.new(0, 6, 0, 42)
container.BackgroundTransparency = 1
container.Parent = mainFrame

local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, isMobile and 5 or 6)
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.Parent = container

-- Status Label
local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(1, 0, 0, isMobile and 16 or 18)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = "Current: " .. getLastQuality()
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
statusLabel.TextSize = isMobile and 9 or 10
statusLabel.Font = Enum.Font.GothamSemibold
statusLabel.Parent = container

-- FPS Counter
local fpsLabel = Instance.new("TextLabel")
fpsLabel.Size = UDim2.new(1, 0, 0, isMobile and 14 or 16)
fpsLabel.BackgroundTransparency = 1
fpsLabel.Text = "FPS: --"
fpsLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
fpsLabel.TextSize = isMobile and 8 or 9
fpsLabel.Font = Enum.Font.GothamSemibold
fpsLabel.Parent = container

-- Quality Buttons
local qualities = {"Low", "Medium", "High", "Cinematic"}
local buttons = {}

for _, qualityName in ipairs(qualities) do
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(1, 0, 0, isMobile and 32 or 36)
	button.BackgroundColor3 = COLORS[qualityName]
	button.BackgroundTransparency = 0.4
	button.BorderSizePixel = 0
	button.Text = qualityName:upper()
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.TextSize = isMobile and 11 or 12
	button.Font = Enum.Font.GothamBold
	button.AutoButtonColor = false
	button.Parent = container
	
	buttons[qualityName] = button
	
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = button
	
	button.MouseEnter:Connect(function()
		button.BackgroundTransparency = 0.2
	end)
	
	button.MouseLeave:Connect(function()
		button.BackgroundTransparency = currentQuality == qualityName and 0.1 or 0.4
	end)
	
	button.MouseButton1Click:Connect(function()
		applyPerformanceSettings(qualityName)
		statusLabel.Text = "Current: " .. qualityName
		
		-- Update button states
		for name, btn in pairs(buttons) do
			btn.BackgroundTransparency = name == qualityName and 0.1 or 0.4
		end
		
		if isMobile then
			task.wait(0.3)
			screenGui.Enabled = false
		end
	end)
end

-- Toggle Button (Smaller size and positioned at edge)
local toggleButton = Instance.new("TextButton")
toggleButton.Size = isMobile and UDim2.new(0, 35, 0, 35) or UDim2.new(0, 38, 0, 38)
toggleButton.Position = isMobile and UDim2.new(1, -20, 0.5, 0) or UDim2.new(1, -22, 0.5, 0)
toggleButton.AnchorPoint = Vector2.new(0.5, 0.5)
toggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
toggleButton.BackgroundTransparency = 0.2
toggleButton.BorderSizePixel = 0
toggleButton.Text = "⚙️"
toggleButton.TextSize = isMobile and 16 or 18
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Parent = toggleScreenGui

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0.5, 0)
toggleCorner.Parent = toggleButton

local toggleStroke = Instance.new("UIStroke")
toggleStroke.Color = Color3.fromRGB(80, 80, 100)
toggleStroke.Thickness = isMobile and 1 or 1.5
toggleStroke.Transparency = 0.3
toggleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
toggleStroke.Parent = toggleButton

toggleButton.MouseButton1Click:Connect(function()
	screenGui.Enabled = not screenGui.Enabled
end)

-- Add hover effect for toggle button
toggleButton.MouseEnter:Connect(function()
	toggleButton.BackgroundTransparency = 0
	toggleStroke.Transparency = 0
end)

toggleButton.MouseLeave:Connect(function()
	toggleButton.BackgroundTransparency = 0.2
	toggleStroke.Transparency = 0.3
end)

-- ============================================
-- FPS COUNTER (Optimized)
-- ============================================

local lastUpdate = tick()
local frameCount = 0

local fpsConnection = RunService.RenderStepped:Connect(function()
	frameCount = frameCount + 1
	local now = tick()
	
	if now - lastUpdate >= 0.5 then
		local fps = math.floor(frameCount / (now - lastUpdate))
		fpsLabel.Text = "FPS: " .. fps
		
		fpsLabel.TextColor3 = fps >= 55 and Color3.fromRGB(100, 255, 100)
			or fps >= 30 and Color3.fromRGB(255, 200, 100)
			or Color3.fromRGB(255, 100, 100)
		
		frameCount = 0
		lastUpdate = now
	end
end)

-- ============================================
-- HOTKEY (Desktop Only)
-- ============================================

local hotkeyConnection
if not isMobile then
	hotkeyConnection = UserInputService.InputBegan:Connect(function(input, processed)
		if processed then return end
		if input.KeyCode == Enum.KeyCode.G then
			screenGui.Enabled = not screenGui.Enabled
		end
	end)
end

-- ============================================
-- AUTO-APPLY SYSTEM
-- ============================================

-- Apply on respawn
local characterConnection
characterConnection = player.CharacterAdded:Connect(function()
	screenGui.Enabled = false
	task.wait(1)
	applyPerformanceSettings(getLastQuality())
end)

-- Auto-apply to new particles (debounced with error handling)
local handleNewParticle = debounce(function(obj)
	local preset = QUALITY_PRESETS[currentQuality]
	if preset and obj and obj.Parent then
		pcall(function() obj.Enabled = preset.particlesEnabled end)
	end
end, 0.1)

local descendantConnection = Workspace.DescendantAdded:Connect(function(obj)
	if obj:IsA("ParticleEmitter") or obj:IsA("Smoke") or obj:IsA("Fire") or obj:IsA("Sparkles") then
		handleNewParticle(obj)
	end
end)

-- Apply on startup
task.delay(2, function()
	applyPerformanceSettings(getLastQuality())
	-- Update button state
	if buttons[currentQuality] then
		buttons[currentQuality].BackgroundTransparency = 0.1
	end
end)

-- ============================================
-- CLEANUP
-- ============================================

local function cleanup()
	if fpsConnection then fpsConnection:Disconnect() end
	if hotkeyConnection then hotkeyConnection:Disconnect() end
	if characterConnection then characterConnection:Disconnect() end
	if descendantConnection then descendantConnection:Disconnect() end
	if screenGui then screenGui:Destroy() end
	if toggleScreenGui then toggleScreenGui:Destroy() end
end

local playerRemovingConnection = Players.PlayerRemoving:Connect(function(removingPlayer)
	if removingPlayer == player then
		cleanup()
	end
end)

print("═══════════════════════════════════════")
print("🎮 Performance Settings Loaded")
print("📱 Platform: " .. (isMobile and "Mobile" or "Desktop"))
print(isMobile and "📌 Tap ⚙️ to open settings" or "📌 Press G or click ⚙️")
print("═══════════════════════════════════════")
